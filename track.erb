<!doctype html>
<html>
  <head>
    <title><%= track.artist %> - <%= track.name %></title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
    <style type="text/css">
      body { -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; }
      input[type="text"] { width: 400px; }
      .half input[type="text"] { width: 180px; }
      .half span { display: inline-block; width: 40px; text-align: center; }
      .genre input[type="text"] { width: 276px; }
      .genre .dropdown { margin-left: 4px; display: inline-block; }
      .genre .dropdown button { width: 116px !important; padding: 2px !important; margin-top: -4px !important; }
      #genre-presets a { cursor: pointer; }
      input { border: 1px solid #ced4da; }
      .is-invalid { border-color: #dc3545; }
      .is-invalid:focus { border-color: #dc3545; box-shadow: 0 0 0 .2rem rgba(220,53,69,.25); }
      img { width: 125px; height: 125px; }
      tr.noborder td { border-color: transparent; }
      div.tiny { font-size: 60%; padding: 0; margin-bottom: 0; }
      td div.alert { padding: 8px 0 0 0; }
      div#zoomview-container { width: 100vw; height: 100px; position: absolute; left: 0 }
      div#overview-container { width: 100vw; height: 50px; position: absolute; left: 0; margin-top: 100px; }
      div.under-overview { margin-top: 150px; }
      div#controls { margin: 4px auto; }

      .flash{
        -moz-animation: flash 0.5s ease-out;
        -moz-animation-iteration-count: 1;
        -webkit-animation: flash 0.5s ease-out;
        -webkit-animation-iteration-count: 1;
        -ms-animation: flash 0.5s ease-out;
        -ms-animation-iteration-count: 1;
      }

      @-webkit-keyframes flash {
        0% { background-color: none; }
        50% { background-color: #FFFF9C; }
        100% { background-color: none; }
      }

      @-moz-keyframes flash {
        0% { background-color: none; }
        50% { background-color: #FFFF9C; }
        100% { background-color: none; }
      }

      @-ms-keyframes flash {
        0% { background-color: none; }
        50% { background-color: #FFFF9C; }
        100% { background-color: none; }
      }
    </style>
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/peaks.js/dist/peaks.js"></script>
    <script type="text/javascript">
      $(document).ready(() => {
        // auto fix metadata
        let autofixes = [
          ['name', ' [Explicit]', ''],
          ['name', ' (Original Mix)', ''],
          ['name', / feat.? (.+)[^\)]$/i, ' (feat. $1)'],
          ['name', / \(feat.? (.+?)\) \[Radio Edit\]/i, ' (Radio Edit feat. $1)'],
          ['name', / \(Feat.? (.+?)\)/, ' (feat. $1)'],
          ['name', / \[feat.? (.+?)\]/i, ' (feat. $1)'],
          ['name', / ft. (.+)/i, ' (feat. $1)'],
          ['artist', / feat.? (.+)/i, '', (match) => { $('#name').val(function() { return this.value + ` (feat. ${match[1]})`; }); }],
          ['artist', / featuring (.+)/i, '', (match) => { $('#name').val(function() { return this.value + ` (feat. ${match[1]})`; }); }],
          ['album', ' [Explicit]', ''],
          ['album', / \(feat.? .+\)/i, ''],
          ['album', / ft.? .+/i, ''],
          ['genre', 'Dance & DJ', 'Electronic'],
          ['genre', 'Dance', 'Electronic'],
          ['genre', 'Rap & Hip-Hop', 'Hip Hop/Rap'],
          ['genre', 'Rap/Hip Hop', 'Hip Hop/Rap'],
          ['genre', 'Hip-Hop/Rap', 'Hip Hop/Rap'],
          ['genre', /^.+ House$/, 'House'],
          ['genre', 'Alternative Rock', 'Rock'],
          ['genre', 'Melodic House & Techno', 'House'],
          ['genre', 'Electronica', 'Electronic'],
          ['genre', 'Mainstage', 'House'],
          ['genre', 'Drum & Bass', 'Electronic'],
          ['genre', /^Electronic \/ .+/, 'Electronic'],
          ['genre', /^Techno \(.+\)/, 'Electronic'],
          ['name', / \(feat. (.+)\) \(feat. (.+)\)/i, ' (feat. $1)'],
        ];
        autofixes.forEach((row) => {
          let el = $('#' + row[0]);
          let val = el.val();
          let res = null;
          let should_exec = row[3] && row[1] instanceof RegExp;
          if (should_exec) { res = row[1].exec(val); }

          el.val(val.replace(row[1], row[2]));
          if (should_exec && res) { row[3](res); }
        });

        var validGenres = [];
        $('.dropdown-item').each(function(index, obj) { validGenres.push($(this).text()); });

        // update element values
        function flash(id) {
          $(id).addClass("flash");
          setTimeout(() => $(id).removeClass("flash"), 500);
        }
        function setValue(ids, value) {
          if (typeof(ids) == "string") { setValue([ids], value); }
          ids.forEach((id) => { $(id).val(value); flash(id); });
        }
        function updateValidationStatus(el, isValid) {
          if (isValid) { $(el).removeClass("is-invalid"); }
          else { $(el).addClass("is-invalid"); }
          return isValid;
        }
        function validate() {
          var allValid = true;
          $.each(["#name", "#artist"], (idx, el) => {
            allValid = updateValidationStatus(el, $(el).val().length > 0) && allValid;
          });
          var yearVal = parseInt($("#year").val());
          var yearValid = !isNaN(yearVal) && yearVal > 1000;
          allValid = updateValidationStatus("#year", yearValid) && allValid;
          var genreValid = validGenres.indexOf($("#genre").val()) >= 0;
          allValid = updateValidationStatus("#genre", genreValid) && allValid;

          $("#submit").attr("disabled", !allValid);
        }
        validate();
        $("#name, #artist, #year, #genre").bind("input", validate);
        $("#noalbum").click(() => {
          setValue(["#track", "#track_count", "#disc", "#disc_count"], "0");
          setValue(["#album_artist", "#album"], "");
          $("#clear_artworks").prop("checked", true);
        });
        $("#single").click(() => {
          setValue(["#track", "#track_count", "#disc", "#disc_count"], "0");
          setValue(["#album_artist"], "");
        });
        $("#genre-presets a").click(function() {
          $("#genre").val(this.text);
          validate();
          flash("#genre");
        });

        // waveforms/audio
        const options = {
          zoomview: {
            container: document.getElementById('zoomview-container'),
            waveformColor: 'rgb(63, 77, 155)',
            axisGridlineColor: 'rgba(0,0,0,0.5)',
            axisLabelColor: 'rgba(0,0,0,0.5)'
          },
          overview: {
            container: document.getElementById('overview-container'),
            waveformColor: 'rgba(63, 77, 155, 0.75)',
            highlightColor: 'transparent',
            axisGridlineColor: 'rgba(0,0,0,0.5)',
            axisLabelColor: 'rgba(0,0,0,0.5)'
          },
          mediaElement: document.querySelector('audio'),
          dataUri: {
            arraybuffer: "/waveform/<%= track_id %>.dat"
          },
          pointMarkerColor: '#000000',
          logger: console.error.bind(console),
          points: [
            { time: parseFloat($("#start").val()), labelText: "", id: "start" },
            { time: parseFloat($("#finish").val()), labelText: "", id: "finish" }
          ]
        };

        const instance = peaks.init(options, function(err, peaks) {
          if (err) {
            console.error('Failed to initialize Peaks instance: ' + err.message);
            return;
          }
        });
        var savedTime = -1;
        var playing = false;
        function startedPlaying() {
          if (savedTime == -1) { $("#play-pause i").removeClass("fa-play").addClass("fa-pause"); }
          playing = true;
        }
        function stoppedPlaying() {
          $("#play-pause i").removeClass("fa-pause").addClass("fa-play");
          playing = false;
        }
        function togglePlayPause() {
          if (savedTime != -1) {
            $("#play-pause i").removeClass("fa-play").addClass("fa-pause");
            savedTime = -1;
            return;
          }
          var audio = document.getElementById("audio");
          if (!audio.paused) {
            audio.pause();
          } else {
            if (audio.stopped) { audio.currentTime = 0; }
            audio.play();
          }
        }
        function ensureMoveChecked() {
          $("#move").prop("checked", true);
        }
        function markStart() {
          setValue(["#start"], document.getElementById("audio").currentTime.toFixed(2));
          updateStartFinishPoints();
          ensureMoveChecked();
        }
        function markFinish() {
          setValue(["#finish"], document.getElementById("audio").currentTime.toFixed(2));
          updateStartFinishPoints();
          ensureMoveChecked();
        }
        function updateStartFinishPoints() {
          instance.points.getPoint("start").update({ time: parseFloat($("#start").val()) });
          instance.points.getPoint("finish").update({ time: parseFloat($("#finish").val()) });
        }
        $("#audio").bind("play", startedPlaying);
        $("#audio").bind("pause", stoppedPlaying);
        // need to wait for audio file to fully load to get the duration
        // $("#audio").bind("canplaythrough", updateStartFinishPoints); TODO?
        $("#play-pause").click(togglePlayPause);
        $("#mark-start").click(markStart);
        $("#mark-finish").click(markFinish);
        $("#start, #finish").bind("change", updateStartFinishPoints);

        function setSpeed(e) {
          let target = $(e.currentTarget);
          let speed = parseFloat(target.attr('data-speed'));
          $("#audio")[0].playbackRate = speed;
          setTimeout(() => document.activeElement.blur(), 1);
        }
        function setSpeedShortcut(target) {
          let el = $(target);
          if (!el.is(":checked")) { el.click(); }
        }
        $("input[name=options]").change(setSpeed);

        var originalOverviewSize = 100;
        var overviewSize = originalOverviewSize;
        function setOverviewSize() {
          $("#overview-container")[0].style.width = `${overviewSize}vw`;
          instance.views.getView('overview').fitToContainer();
        }
        function growOverview(e) {
          overviewSize += originalOverviewSize;
          setOverviewSize();
        }
        function shrinkOverview(e) {
          overviewSize = Math.max(originalOverviewSize, overviewSize - originalOverviewSize);
          setOverviewSize();
        }
        $("#grow-overview").click(growOverview);
        $("#shrink-overview").click(shrinkOverview);

        $(window).keypress((e) => {
          if ($(e.target).is("input")) { return; }
          if (e.key === ' ' || e.key === 'Spacebar') {
            e.preventDefault();
            togglePlayPause();
          } else if (e.key === 's') {
            e.preventDefault();
            markStart();
          } else if (e.key === 'f') {
            e.preventDefault();
            markFinish();
          } else if (e.key === 'q') {
            e.preventDefault();
            setSpeedShortcut("#speed-1x");
          } else if (e.key === 'w') {
            e.preventDefault();
            setSpeedShortcut("#speed-1_25x");
          } else if (e.key === 'e') {
            e.preventDefault();
            setSpeedShortcut("#speed-1_5x");
          } else if (e.key === '+') {
            growOverview();
          } else if (e.key === '-') {
            shrinkOverview();
          }
        });
        $(window).keydown((e) => {
          if ($(e.target).is("input") || savedTime != -1) { return; }
          var newSavedTime = -1;
          var audio = document.getElementById("audio");
          if (e.key === 'a') {
            newSavedTime = parseFloat($("#start").val());
          } else if (e.key === 'd') {
            newSavedTime = parseFloat($("#finish").val());
          } else if (e.key === 'g') {
            newSavedTime = audio.currentTime;
          }

          if (newSavedTime == -1) { return; }
          savedTime = newSavedTime;
          audio.currentTime = savedTime;
          audio.play();
        });
        $(window).keyup((e) => {
          if ($(e.target).is("input")) { return; }
          if ( (e.key === 'a' || e.key === 'd' || e.key === 'g') && savedTime != -1) {
            audio.pause();
            audio.currentTime = savedTime;
            savedTime = -1;
          }
        });
      });
    </script>
  </head>
  <body>
    <div class="container">
      <div class="row">
        <div id="peaks-container">
          <div id="zoomview-container"></div>
          <div id="overview-container"></div>
        </div>
      </div>
      <div class="row under-overview">
        <audio preload src="/audio/<%= track_id %>" id="audio"></audio>
        <div id="controls">
          <button type="button" class="btn btn-sm btn-outline-info" id="mark-start">Mark Start</button>
          <button type="button" class="btn btn-sm btn-outline-info" id="mark-finish">Mark Finish</button>
          <button type="button" class="btn btn-sm btn-outline-dark" id="play-pause"><i class="fa fa-play"></i></button>
          <div class="btn-group btn-group-toggle" data-toggle="buttons">
            <label class="btn btn-sm btn-outline-secondary active">
              <input type="radio" name="options" id="speed-1x" autocomplete="off" data-speed="1.0" checked> 1x
            </label>
            <label class="btn btn-sm btn-outline-secondary">
              <input type="radio" name="options" id="speed-1_25x" autocomplete="off" data-speed="1.25"> 1.25x
            </label>
            <label class="btn btn-sm btn-outline-secondary">
              <input type="radio" name="options" id="speed-1_5x" autocomplete="off" data-speed="1.5"> 1.5x
            </label>
          </div>

          <button type="button" class="btn btn-sm btn-outline-dark" id="shrink-overview"><i class="fa fa-minus"></i></button>
          <button type="button" class="btn btn-sm btn-outline-dark" id="grow-overview"><i class="fa fa-plus"></i></button>
        </div>
      </div>
      <div class="row justify-content-center">
        <div class="alert alert-light tiny">s/f to set, a/d/g to preview, space to play/pause, q/w/e to change speed, +/- to change overview waveform width</div>
      </div>
      <div class="row justify-content-center">
        <form action="/track/<%= track_id %>" method="post">
          <table class="table">
            <tbody>
              <tr class="noborder">
                <td>Name</td>
                <td><input type="text" id="name" name="name" value="<%= HTMLEntities.new.encode(track.name) %>" /></td>
              </tr>
              <tr>
                <td>Artist</td>
                <td><input type="text" id="artist" name="artist" value="<%= HTMLEntities.new.encode(track.artist) %>" /></td>
              </tr>
              <tr>
                <td>Album</td>
                <td><input type="text" id="album" name="album" value="<%= HTMLEntities.new.encode(track.album) %>" /></td>
              </tr>
              <tr>
                <td>Album Artist</td>
                <td><input type="text" id="album_artist" name="album_artist" value="<%= HTMLEntities.new.encode(track.album_artist) %>" /></td>
              </tr>
              <tr>
                <td>Genre</td>
                <td class="genre">
                  <input type="text" id="genre" name="genre" value="<%= HTMLEntities.new.encode(track.genre) %>" />
                  <div class="dropdown" id="genre-presets">
                    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                      Presets
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                      <a class="dropdown-item">Country</a>
                      <a class="dropdown-item">Disco</a>
                      <a class="dropdown-item">Electronic</a>
                      <a class="dropdown-item">Hip Hop/Rap</a>
                      <a class="dropdown-item">House</a>
                      <a class="dropdown-item">K-Pop</a>
                      <a class="dropdown-item">Pop</a>
                      <a class="dropdown-item">R&amp;B/Soul</a>
                      <a class="dropdown-item">Rock</a>
                      <a class="dropdown-item">Trance</a>
                      <a class="dropdown-item">Trap</a>
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>Year</td>
                <td><input type="text" id="year" name="year" value="<%= track.year %>" /></td>
              </tr>
              <tr>
                <td>Start / Finish</td>
                <td class="half"><input type="text" id="start" name="start" value="<%= ((track.start.to_f * 100.0).to_i / 100.0).to_s %>" /><span> to </span><input type="text" id="finish" name="finish" value="<%= ((track.finish.to_f * 100).to_i / 100.0).to_s %>" /></td>
              </tr>
              <tr>
                <td>Track</td>
                <td class="half"><input type="text" id="track" name="track" value="<%= track.track %>" /><span> of </span><input type="text" id="track_count" name="track_count" value="<%= track.track_count %>" /></td>
              </tr>
              <tr>
                <td>Disc</td>
                <td class="half"><input type="text" id="disc" name="disc" value="<%= track.disc %>" /><span> of </span><input type="text" id="disc_count" name="disc_count" value="<%= track.disc_count %>" /></td>
              </tr>
              <% if !track.artworks.empty? %>
              <tr>
                <td>Artwork</td>
                <td><input type="checkbox" id="clear_artworks" name="clear_artworks" value="yes" /> Clear all artwork?</td>
              </tr>
              <tr class="noborder">
                <td>&nbsp;</td>
                <td>
                <% track.artworks.each do |artwork| %>
                  <img class="img-thumbnail" src="/<%= artwork %>" />
                <% end %>
                </td>
              </tr>
              <% end %>
              <tr>
                <td>&nbsp;</td>
                <td><input type="checkbox" id="move" name="move" value="yes" /> Move track?</td>
              </tr>
              <tr>
                <td>&nbsp;</td>
                <td>
                  <input type="submit" id="submit" class="btn btn-sm btn-primary" value="Submit" />
                  <button type="button" class="btn btn-sm btn-success" id="noalbum">No Album</button>
                  <button type="button" class="btn btn-sm btn-success" id="single">Single From Album</button>
                  <a class="btn btn-sm btn-secondary" href="/" role="button">Cancel</a>
                  <br/>
                  <div class="alert alert-light tiny">* Comments, composer, compilation, lyrics and grouping will be cleared</div>
                </td>
              </tr>
            </tbody>
          </table>
        </form>
      </div>
    </div>
  </body>
</html>
